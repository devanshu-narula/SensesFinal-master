import re
import tweepy
from tweepy import OAuthHandler
from textblob import TextBlob
import csv
import json
import operator
from watson_developer_cloud import ToneAnalyzerV3
from _codecs import encode
import os
from statistics import mode, StatisticsError

from randomly import pred


avg_pronoun_count = []
avg_d_count = []
final_tone = []
final_tone_score = [] 
tone = [] 
t_count = []
tone_analyzer = ToneAnalyzerV3(username="56f51941-f34e-4c14-8507-9ddabcdbc0b1",password="xTGTxHixsmuo",version='2017-09-21')
class TwitterClient(object):

    #tone_analyzer = ToneAnalyzerV3(username="56f51941-f34e-4c14-8507-9ddabcdbc0b1",password="xTGTxHixsmuo",version='2017-09-21')


    '''
    Generic Twitter Class for sentiment analysis.
    '''
    def __init__(self):
        '''
        Class constructor or initialization method.
        '''
        # keys and tokens from the Twitter Dev Console
        consumer_key = 'jqibaucxKcrxc4WkezhPGCkT3'
        consumer_secret = 'Yw1ZGOQ2mGIIAIrzWFdEnCHQVNMnnH0WbppN4EhKy3fbQa7JqG'
        access_token = '792270234543620096-rnTmvYp4nELdXECTx9MKGiy78ZxkjTs'
        access_token_secret = 'D4lp8a73KB1TUvNmG0WbMO7D4t2WZSSR3OmnpFKLj1hjD'
 
        # attempt authentication
        #try:
        # create OAuthHandler object
        self.auth = OAuthHandler(consumer_key, consumer_secret)
        # set access token and secret
        self.auth.set_access_token(access_token, access_token_secret)
        # create tweepy API object to fetch tweets
        self.api = tweepy.API(self.auth)
        #except:
            #print("Error: Authentication Failed")
 
    def clean_tweet(self, tweet):
    	print("inside clean tweet")
    	return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", tweet).split())
 
    def get_tweet_sentiment(self, tweet):

    	print("inside get tweet sentiment")
    	# create TextBlob object of passed tweet text
    	analysis = TextBlob(self.clean_tweet(tweet))
    	# set sentiment
    	score = analysis.sentiment.polarity
    	return score

    def get_d_words(self, tweet):

    	print("inside get d words")
    	d_words = ["abandoned","achy","afraid","agitated","agony","alone","anguish","antisocial","fucked","anxious","breakdown","brittle","broken","catatonic","consumed","crisis","crushed","crying","defeated","depressed","depression","Depressed","Depression","suicide","defensive","dejected","demoralized","desolate","despair","desperate","despondent","devastated","discontented","disheartened","dismal","distractable","distraught","distressed","doomed","dreadful","dreary","edgy","emotional","empty","excluded","exhausted","exposed","fatalistic","forlorn","fragile","freaking","gloomy","grouchy","helpless","hopeless","hurt","inadequate","inconsolable","injured","insecure","irrational","irritable","isolated","lonely","lousy","low","melancholy","miserable","moody","morbid","needy","nervous","nightmarish","oppressed","overwhelmed","pain","paranoid","pessimistic","reckless","rejected","resigned","sadness","shattered","sobbing","sorrowful","suffering","suicidal","tearful","touchy","trapped","uneasy","unhappy","unhinged","unpredictable","upset","vulnerable","wailing","weak","weepy","withdrawn","woeful","wounded","wretched", "kill","died","disappointed","disappointment","sick","shoot","die","unwanted"]
    	count2 = 0
    	#print(tweet)
    	for x in tweet.split():
    	    for y in d_words:
    	    	if x.lower() == y.lower():
    	    		count2 = count2 + 1
    	return count2


    def get_pronoun(self, tweet):

    	print("inside get pronouuns")
    	pronouns = ["I","I've", "Me", "me", "Mine", "mine", "Myself", "myself", "My", "my","i'm","i'd",]
    	count1 = 0
    	for x in tweet.split():
    	#print(x)
    		for y in pronouns:
    			if x.lower() == y.lower():
    				count1 = count1 + 1
    	return count1


    def strip_emoticons(self,s):
   
        emoji_pattern = re.compile("["
                               u"\U0001F600-\U0001F64F"  # emoticons
                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                               u"\U0001F680-\U0001F6FF"  # transport & map symbols
                               u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                               "]+", flags=re.UNICODE)

        return emoji_pattern.sub(r'', s.strip())

    
    def get_tweets(self, id_list):
        #tone_analyzer = ToneAnalyzerV3(username="56f51941-f34e-4c14-8507-9ddabcdbc0b1",password="xTGTxHixsmuo",version='2017-09-21')
        '''
        Main function to fetch tweets and parse them.
        '''
        # empty list to store parsed tweets
        tweets = []
        iterations = 0
        avg_pronoun = 0
        d_word_count = 0
        pronoun_count = 0
        tone_score = []
        person_tone_list = []
        tone_score2 = []

        
        try:
            # call twitter api to fetch tweets
            for x in id_list[-21:]:
                iterations = iterations + 1
                score = []
                tweet_text = []
                fetched_tweets = self.api.get_status(x)
                # empty dictionary to store required params of a tweet
                #rint(fetched_tweets)
                t1 =fetched_tweets.created_at
                print(t1.hour)
                if (t1.hour<4):
                    t_count.append(1)
                else:
                    t_count.append(0)
                
                
                parsed_tweet = {}
 
                # saving text of tweet
                parsed_tweet['text'] = fetched_tweets.text
                print("FETCHED TWEET",iterations,":", parsed_tweet['text'])
                # saving sentiment of tweet
                parsed_tweet['score'] = self.get_tweet_sentiment(fetched_tweets.text)
                
                print(parsed_tweet['text'])

                
                #tone_analyzer_result = tone_analyzer.tone(content_type = 'text/plain', tone_input = strip_emoticons(parsed_tweet['text']) )
                tone_analyzer_result = tone_analyzer.tone(content_type = 'text/plain', tone_input = parsed_tweet['text']) 

                print(tone_analyzer_result)


                document_tone = tone_analyzer_result['document_tone']
                #print(document_tone)
                tone_categories = document_tone['tones']
                #print(tone_categories)
                if not tone_categories:
                    continue
                else:
                    for tones in tone_categories:
                        
                        tone_score.append(tones['score'])
                
                        #print("Score:", tones['score'])
                        #print("Tone:", tones['tone_name'])
                    #print("tone score list:",tone_score)
                    max_index = tone_score.index(max(tone_score))
                    #print("max index=", max_index)
                    tone_score = []

                    final_tweet_tone = tone_categories[max_index]
                    print("Final Tweet Tone: ",final_tweet_tone)
                    person_tone_list.append(final_tweet_tone)
                print("person tone list:", person_tone_list)

                     

                pronoun_count = self.get_pronoun(parsed_tweet['text'])
            

                d_word_count = self.get_d_words(parsed_tweet['text'])
                avg_d_count.append(d_word_count)

                avg_pronoun_count.append(pronoun_count)
        
                if fetched_tweets.retweet_count > 0:
                # if tweet has retweets, ensure that it is appended only once
                    if parsed_tweet not in tweets:
                        tweets.append(parsed_tweet['score'])
                else:
                    tweets.append(parsed_tweet['score'])

            print("Pronoun Count:",avg_pronoun_count)
            print("D Word Count:",avg_d_count)

            for x in person_tone_list:
                tone.append(x['tone_name'])
            try:
                final_tone.append(mode(tone))
            except StatisticsError:
                modes = []
                number_counts = {}
                for i in tone:
                    if i in number_counts:
                        number_counts[i] += 1
                    else:
                        number_counts[i] = 1
                for i in number_counts:
                    most_values = max(number_counts.values())

                for key, value in number_counts.items():
                    if  most_values == value:
                        modes.append(key)
                final_tone.append(modes[0])
            
            print(tone)
            tone.clear()
            print("final tone: ", final_tone)

            for x in person_tone_list:
                if x['tone_name'] == final_tone[0]:
                    tone_score2.append(x['score'])
            print("Tone Score List", tone_score2)
            final_tone_score.append(sum(tone_score2)/float(len(tone_score2)))
            print("Final Tone Score: ", final_tone_score)
            
            print("T Count List: ", t_count)

            
            person_tone_list.clear()
            tone_score2.clear()
 
            # return parsed tweets
            return tweets

        except tweepy.TweepError as e:
            # print error (if any)
            print("Error : " + str(e))








    def working_code(self,tweet_id_list):
        try:
            print("inside working function")
            count=0
            api = TwitterClient()
            l1=[]
            headers = []
    
            id_list = tweet_id_list
            """
            id_list = [["969781295604797440", "957052014927732738", "969781192726843393", "974835005607305216", "973715288838549504", "957052247489351680", "963969034004975616", "957300422712201217", "973728904723730432"],["967261371292377090", "952697185241624576", "964209375010172928", "967935513494802432", "973748381985189888", "949498340114345984", "959977053473959937", "966847883529113600", "966845405567778816", "967410618339819520", "967243148702420993", "967937111243583489", "967935619228938240", "953747259115544577", "956626078558076928", "957442703502921729", "948400724068765697", "957803030866550784", "967191310154326017", "970786716524208128", "967936236387291136", "960891735776813056", "954411460037263360", "967227877266808833", "953741806465896449", "960725590042202112"],["948279686596980736", "962356414982242309", "963397411207966720", "967923313740693504", "959348101717749760", "954063044555956225", "948282537536663552", "961214938596261889", "959372750132400128", "962356191102775296", "948280550258761728", "957599096470056960", "961228944056832001", "967228483725225984", "955090126345924610", "948278743390277633", "954062728208855040", "958648041250078720", "961298550842773504", "960902411836518400", "960902088086642689", "973966662432047104", "959696846816927745", "948260372301070336", "959769246594088961", "964177101153746944", "957599052249444353", "957599010444857344", "948290891575320576", "948280083097174016", "948281614726873088", "948278900278231040", "963086954916016128", "948365594469965824", "958648114235064321", "958401068022448129", "958648585754570752", "962223599338713088", "962220733119184897", "958649809191055361", "958629095255900161", "961591727428534274", "962224855209844739", "961851015472463873", "958648736585887744", "963086170551808001", "958648399896526849", "954062558880718848", "957599185343102979", "957514348116652032", "954749742537261056", "960901910533349376", "958649528206352385", "961850813252382720", "948282230845001728", "958965961939345408", "963294556245471232", "959348032050352128", "961856885094678528", "958648951497879552", "958649414322503680", "959809601007861760", "962357201074454529", "954749209797783552", "959696651920162816", "961591951588904963", "959348385168834560", "962760020776558592", "962355944662360064", "958649929529942017", "962225044104429569", "948261501911031808", "977239733347627009", "975007487408594944", "953713698341666816", "974307247772725248", "961572657941512192", "960902291506184193", "954749581790556162", "960903233341292544", "948279047607353344", "958400883162726400", "959769318807384065", "972538027305197568", "958648888914714625", "967923903174553600", "955717346508746752", "958628934127558656", "962653694465462272", "962225431855296513", "958648308599111680", "975007546531459073", "958651114836013056", "967927954767425536", "967925882424721408"],["948095404297674752"],["973635358868099073", "958500321994641409", "958852056214917121", "948640204004511744", "958140811761389568", "958830808982319110", "961634669954568192", "972193526716026880", "958942081879289856", "976906903040266245", "958946127927300096", "973272485687939073", "950424365719531520", "958490403925262337", "960711227327569920", "958142000011857921", "973966397310230529", "955910801193357312", "958505596894044161", "958941587463180290", "958496946280370176", "958500605928071168", "956578543970017280", "953803299807027200", "954073954855145473", "976213116940931072", "953322557037563907", "957801066577448960", "971904241047625728"],["951570165413662724", "951578800227340292", "953392232161214465", "952376989192802304", "959189865517764608", "974438799987142656", "952032113292869632", "951645961067089920", "958479030176571392", "958754639436017671", "958753629493710849", "958479406191861760", "970488434316935173", "974439027121315840", "951579830801313793", "952612313294671872", "960307668907945985", "952377244680368128", "951640221292036096", "951581043416489985"],["972652476687179776", "975903544086880257", "975902269924413440", "975903277362634753", "975902763572977670", "975902464322007040"],["948147805792514048", "948148236644007942", "949366780924870656", "953691419322937344", "947878032479469568", "956604446070329344", "948260908593065984", "975067228474257409", "949728278784327680", "948148471852236800", "977288791298732032", "947903743562878976", "948148962258665472", "949366219013935104", "950091931970813952", "948997119456587776", "960870747534077953", "950436619256979456", "960870019377741824", "974374617497329664", "948231331317661696", "948614189118976001", "950529857070407680", "955740672383844355", "950091926585327616"],["961391591821750272", "967963246798893057", "967928818408349697", "950199076192059392", "967977837679398912", "962286529606426625", "975047453291380736", "967773456514379777", "975723176494682112", "949679565655326720", "967761009149583361", "953415171866705920", "967928727463251969", "962286456000561152", "975612603887046656", "953415702215405568", "949670721478774785", "961391954226397184", "950199023314464770", "961943130634207232", "950562132088668160", "967763343565033472", "971940642870804480", "950883414235738113", "976449232210083840", "968120275530260480", "962768081918427136"],["966549338297192448"],["968185372906807297", "963836698907037696", "976520297871478784", "976882691319717891", "952965055548674048", "963111919078006789", "967822987713024001", "953327450993446912", "956588936683577345", "959125648299175936", "966011026801127424", "969634927435272193", "969997316026445825", "953689832840101889", "975795522714955776", "963474318456913920", "965648637240934402", "957676101635059712", "954414604679081984", "958400879996129280", "964561484440309766", "972171655165415425", "954776994146934784", "972896426215837696", "955501773090967553", "950790720775950336", "949703538375979008", "950065938572996610", "961662366743228417", "966373411697119233", "974345971906891777", "956951334221213696", "965286256090472448", "948616367766372352", "964199084855906306", "961299978613379072", "948978767648772096", "962387143401361408", "967460585456664578", "971446873654521857", "962749535519899650", "975070745872117760", "971084479287775232", "973983584175435788", "954052226003165187", "951877898083938304", "956226548188745730", "976157910505017345", "958038485348372481", "973621199099002882", "951153128380026880", "952240292631056385", "972534030225805312", "975433134006325249", "949341159721197569", "955139381651759104", "977245080439480320", "955864158284771335", "948253986330759169", "950428323913650181", "959488040484917248", "960937595642499073", "971809256281399297", "962024757288886272", "970359709088780288", "970722096434286592", "973258807613775872", "958763265395429380", "964923864584253441", "947891833501356040", "952602668526198784", "957313711248756736", "968910153696399360", "960575202500497408", "960212818283892736", "966735803211755522", "959850427142504448", "969272539586408448", "974708362133803010", "968547762391351296", "967098189600968704"],["963474585889882113"],["973618656973348865", "969447782842019841", "962593359465336832", "950934747550814208", "956561434208620545", "956560966346510337", "966848765289091072", "969440721517334528", "956561139000848384", "962582008630190080", "969441233272754176", "951675910863847430", "962583958067167234"],["955961956212424704", "971014199655612417", "967687290188283910", "974876415572103168", "957146729584893952", "959507692887842816", "974876254544437248", "970280859487035392", "963400571318280192", "955960933163020288", "951816932667269120", "955961799903346689", "961137301786103808", "961137348569333760", "959381872072474624", "975419563889192960", "971013718241718272", "974911870250360832", "963721436631216128", "970280714481496065", "959954822219755520", "973934137697423361", "966770069144420353", "961671054388166656", "974960075629449216", "975419066406944768", "970280567974518784", "974876319107366912", "963399917111623680", "963399574525173761", "962354904432955392", "974912241895026688", "964008249384058881", "959955527445839873", "963721687744241664", "970252291293921281", "965091972556836864", "954501024848297984", "974085676932087808", "950974261694353408", "966768477951283200", "957146806164512768", "961184322639179776", "963400099215769601", "967367064695353345", "959382480741548034", "965289090823290880", "967686633519595521", "963691288062181377", "959382341666816000", "955961099467210752", "955969301839724544", "974909238790078464", "961670766625398784", "974876399499599878", "967687002706427905", "970251855853862912", "967687845811961856", "966613081219477504", "961137777176973312", "964004129818394624", "963720764284329984", "963690182196133889", "960183037014130688", "963720081271283712", "966612734367318017", "965471673964097536", "949722515475087360", "957146391041605632", "961137709837422595", "965296488581509120", "957491031791976449", "963399788724039680", "954504554904629248", "962492942244986880", "955236867678457856", "959390042392166400", "963723630222876672", "964008045394055168", "974087818434691073", "974909709412048896", "959512350091956224", "967364165873451008", "966770556669386752", "962355136642166784", "974960837445038080", "976850824692412416", "964005958828490752", "957146217703600129", "955237239088406528", "974965460427878400", "957146584554258432", "975423250883739653", "959383890312929280", "957147564838567941", "955094257890574336", "963722362905489408", "957147659764080640", "959382115241439235", "962491860680769537", "954538763719290880"],["970508164385959936", "972138109486776320", "970507508006768640", "970143371053461504", "970142708168871936", "970364883761057792", "970143544949248000", "970365189458710528", "970141459482628096"],["961098653426479107", "948323612729028608", "976725485462855680", "975616618616123392"],["950780423998754816"],["971919491381825536", "952629557588307968", "972090654674255872", "969775709664268288", "950149732407619584", "949163370493743104", "971952861000151040", "952660623225245696", "962908549222486016", "972346475480043520", "956003628770357249", "950181832087232512", "972346560544690176", "949153794872426498", "971919495743885313", "952659512590323713", "974430196609806336", "950181851922157568", "956003604300693505", "962908546135445504", "969426921938448384"],["976610704676589568", "950218960309555201", "950213707488989184", "968609453519011840", "950137166096732161", "950462910236647424", "950137326117752834", "960686687310491648", "960703111953338369", "950218203841679361", "950213266378280960", "976610822007947266", "960661673852973058", "960661835975454720", "948337916752908288", "950213844319854592"],["966525699350777856", "955289212684767233", "969416588918128640", "973594626308427777", "975542258790477824", "972651496486694913", "966522593502203905", "976639098554372096", "960975235787952128", "973658646046478338", "971822674988105728", "976242098386194433", "963775498718507008", "974265663601639424", "966525629754695682", "960350630689890309", "952195825232465920"],["960321881051086848", "961080144784850945", "963074683305250816", "962559942178648064", "962562468504416256", "962562182763315201", "966138762244665344"],["950303503045414912", "961933420036202498", "950304054223097857", "949771203199229952", "970282881439350784", "961934126973468673", "961934715660918785", "970283799161417728", "950302621046267904", "970283864953253888"],["974917957016014848", "971142168458006528", "973579352926490625", "958395008499019776", "963543114324602880", "956805733689057280", "958169745936801793", "964665238519009280", "959244669698957312", "960289956693504000", "970091649610256384", "965725018935218177", "955340429754585093", "961366712791851008", "972282234924347392", "967926381547016199", "962495194540232705", "960891047135064064", "966799139135721472", "961702590298943491", "949786145969393664", "969021087861309445", "951624160731680771", "976260085667254272"],["955483041815846912", "948367452437655552", "957319499912548352", "964389507595304961", "964124299559915520", "970600646515875840", "970489029354508289", "957390313659740160", "949548602401218561", "964785441512787969", "970486787079659520", "947727735413248000", "952667157799849984", "973708976390107136", "957316854372093952", "968388636550066176", "954912338712432640", "961664550612414465", "971590397670711296", "961750871464964096", "966321285017030660", "952586671974952960", "960585723689816064", "966559907305713664", "963114245998161921", "969455903861862400", "968777154099142656", "952252232237572096", "955482028916592640", "969868375324323840", "965119017362083840", "950951867642798080", "952983148522065920", "970570479412105216", "961482400105713665", "950216665559691266", "969045819562315776", "961107601873424384", "974469227125108736", "968776910347137026", "954828677967204354", "964010116017254400", "950993151489167360", "973048710232989697", "949798718349463552", "964796903073468416", "962550652240125952", "965125317680615424", "964409693262118912", "962124197773369344", "967140254754000897", "961806199644741633", "971588108646060032", "964784848329232384", "969204807302045702", "967516734411411456", "965323117655724032", "957413570219737088", "950283003812630531", "956045393481142272", "958156535514923008", "952399066549407744", "958943513152053249", "958379278030295042", "949281798072225793", "952399880269582337", "954776857374806017", "950489634588553216", "963684518300454913", "966924446744305665", "953157886112403456", "961253589032325121", "971185705736200192", "974469328069365761", "960626709333716992", "961319314631643136", "962830189184081920", "956908107824852992", "963690389537423362", "949172851524997120", "958583443469807616", "969866286938427394", "969104615873630208", "975408722842439681", "960076114189344768", "961748458456649728", "947762811932946432", "960775071856959488", "959318890957324288", "968776312109355008", "966205671799705602", "954111510921596929", "959686292983484416", "948085069142548480", "953168637870911489", "958201748715442176", "963931235499302912", "957680339480186880", "961481822474514432", "963990322157105152", "951682420943872001", "957393418690408448", "956768395592065025", "958719331105460224", "950993237556244480", "973053922251300864", "947924340972118019", "956042484513214464", "969046848144060417", "960644438606467072", "976493179204751362", "968001724140216321", "968009745616564225", "967333250770358272", "961055653149204481", "947764862087782400", "963929782785396736", "950283455945953280", "960389366190354432", "976317495710814208", "964945574247231488", "949167213960945664", "966206579891720193", "968269290133774336", "965297137516011520", "949167537257934848", "961250582752358402", "958884345980358658"],["963362723705712640", "955035207702233088", "963360564008255488", "973501592434458624", "961779498445193216", "960481095786491905", "963361449421635585", "951277213868965888", "974093806369845248", "966581767598620672", "963356098915811328", "955030356897316864", "956115019304808449", "951083141652869120", "956112949617111041", "956119203261460480", "956111833722626049", "956111202324660224", "969814001352785920", "963360654110306304", "969809584725487616", "956117468505714688", "964818501645975552", "966582010679447552", "969809307347828737", "951077904636559360", "957887236023840768", "951083056416174080", "951078227119824896", "951100180018823169", "955035177335496705", "956111065917538304", "957509220089212929", "956118964186173440", "963357554297335811", "964818390140399616", "963360858783936513", "973874114866823169", "951078359064170497", "951078272871223298", "956113958439567361", "963361361873915905", "958513616185057280", "956114086206390273", "956112590047817731", "964818600203755520", "953526169835421696", "954320331514114048", "973873848847278080", "956119047522852864"],["950020079030161408", "957590376730148864", "975395756260712448", "949776550383181824", "970721391690633216", "977255057090543617", "952014366324346880", "977096648479461376", "954573473560457216", "976353907575349249", "958191139441356800", "950000274864709632", "969229667252232192", "956889005194276864", "950620015715168256", "961781103060172800", "964669168476917760", "955669745184882688", "966822702408445952", "971766134172258306", "950741383072985088", "953195502413082625", "955264004431032320", "973673927405920261", "966699942160068608", "959651379244449792", "954936154108846080", "975509039235858432", "973740531598675969", "971892995447492608", "966201520344719361", "968372784626913281", "968186140531548160", "974072026280398849", "954501621190311936", "973675490870521857", "966704631458992128", "955263052013711360", "955646988044795905", "963723320083480576", "967861255871631362", "973676727032516608", "974721695952105473", "962556545815912449", "970721130762956800", "950000073638752257", "947983806618677249", "949940011519979520", "971558278999232513", "975817857182388227", "975563557654945792", "967603958415003648", "955669019922612224", "959639514502189056", "975513560691421184", "956408087165812736", "970321087346114560", "971462175310123009", "957868180151529473", "965498279709564928", "960488823472836608", "961939434244513793", "948348310607155200", "972221131724873729", "969861587942232064", "952540221094092800", "957428076585009152", "967615618273959936", "968541582671663105", "952015399796711426", "966922477283696640", "975514115518148609", "957092402631647232", "954558678081814528"],["953553374754082816", "949995939992887296", "948364640320413702", "954042735471874049", "967390564114190337", "951591230718271489", "953948548449660928", "963482927513440258", "964957153231556609", "954659595552808961", "952936662107115520", "972883152086687745", "953398839846858752", "962132880716595200", "948176239721926657", "950323233538150400", "950170361835999233", "951187628463935489", "953394532745383936", "948177216126537728", "953651341745848320", "965704033368494086", "948194431391485953", "949656789099929600", "959249685276962817", "967865823728754691", "976935756982837250", "953296918494539782", "963503138446757895", "959900188608532491", "953666797529653249", "955221381674872833"],["959637438137274368", "954470687305019393", "964720919007592448", "973408903986864128", "970735692799201281", "976671221084508160", "954467728978534400", "973375544816558080", "953316786186981378", "973401525958725633", "966133436233797633", "954593635277959168", "949776252176666624", "951201024102031361", "954476438165573634", "949776032298602496", "954933528986374145", "950797150597844997", "954557740319461376", "955905626181320706", "954934680620584960", "973757680128004096", "966736133618110465", "953470646180335618", "974735177413935104", "968840705480318976", "962578315151323136", "961704359917633536", "974735126625046528", "975564955431919617", "973375007417126913", "973373020076216321", "958704103181430789", "948103213911302144", "956910728178470917", "970735776051941376", "954934480468430848", "955663757614682115", "973373049956454402"],["972903938105147393", "948184760496611328", "949035674266669056", "970586439405768704", "947896901373964289", "972268687003701249", "974958424218918912", "959188926320738304", "970143702164361216", "974372548585680897", "962053249237839872", "962399462529388544", "974399312116486144", "975488558382374913", "975128498871459840", "973334472845348864", "963151825619730433", "973213350275567616", "975789242503876610", "974758650811166720", "975294527882907649", "948522193675276290", "952951536920989697", "972952954046205952", "973952515585859587", "949035910930280448", "974958531194642433", "951216792256630785", "947977767789920256", "973196627325390849", "975454931825123329", "948522350751944705", "947953643566845952", "956174504899772421", "973196775292104704", "973238301581770752", "975393211610025985", "952100729644306432", "973238685218099200", "971713976349446145", "947972108256194560", "972903725630218240", "960242205305827328", "955895689430650880", "974036006478536706", "958450856814313473", "948341835814010880", "949035860175085569", "971883348598644737", "948169472849989632", "947926691170615296", "949684248486793216", "963773319995633670", "947896399114489857", "962399157372817408", "949403279066312714", "948185107768250368"],["972855239132008451", "976863255258914816", "975740154815111169", "954086709532200965", "964834421772865536", "971096833912078339", "975733252240674821", "967009404586483712", "976863602039812101", "954086012770234369", "975731071273914369", "950697167760560128", "958706892339113984", "967751442168778752", "975733250558779392", "967009575034609664", "963414104756146176", "964817773732999168", "959126131151654918", "967729003502202880", "952179537235857408", "964817384551927808", "972208741985775618", "957627634334265344", "958706896034201600", "970239618670059520", "974278034554486784", "974279540771041280", "956234096862253058", "973218539715858432", "964817951437348864", "967009355378974720", "975741992620748800", "972855131531366400", "958706894138433537", "958706890392920065", "976859357223714817", "957632129462161409", "971726901554352131", "950696659322920960", "956233951848423424", "955750484513558528", "967009197320744960", "954453746670624769", "975740251405733893", "964834423454752769", "973971246831538176"],["976604739227078657", "949777778924244993", "957767927649964033", "962528593682354176", "952727340563431425", "958884458941370368", "957767992082919425", "954177875963469826", "961077068942409729", "948732153726201856", "971482756155936768", "957826775014428672", "971482732265115649", "957767936181227520", "955185879722659840", "976560315369390080", "969765693490163712", "954514105305583617", "948764308808355840", "962820144144711681", "962528515823423488", "954177847727394819", "967973598941020160", "976560542226710528", "955239143499599877", "957997674334248960", "947670327835938816", "967574770446471168", "967973543681122304", "957997511129686016", "976604705169268736", "976560406687830017", "962819237101428737", "955186046521798657", "976560484601204736", "961077261725323265", "967971683893170176", "952727433006014464", "948732288250114048", "962528392708018176", "957767940685910020", "976568459118116864", "970035368174211072", "955185830980673536", "970115700667899905", "976604654393061376", "976568504920002561", "948279822219870209", "955186008802414594"],["958894696390119424"],["956325037010833415", "949717380531458048", "956596364170940416", "956325100655185921", "955859765330145281", "962689440920559616", "950889915121881090", "959139103248928770", "958422539180617731", "956010373597073414", "950703502069829632", "955993688307617792", "966421108831514625", "950854728107397122", "948627685340798976", "961401884207730688", "950955268191473664", "952582240466292742", "962854981295640576", "952582290625978368", "949445389266104320", "955977993264025601", "949615726968627201", "948374052200243200", "947803884734558208", "955860032914108417", "949614302184558593", "955855955622809606", "949616024999092224", "955159259897098241", "956596456659537923", "947886038063763456", "952930674125758466", "963463646339887104", "949615756064509952", "951965354263306240", "951295755800731648", "955993849884762114", "963464376169697283", "955251746686857221", "952859858327318528", "957027434490195969", "957310743199797248", "951297155481956352", "955159019391455233", "955251977562349570", "955903685300715521", "957311913582563329", "955160619665195009", "951527541612957696", "956580731618283522", "948142749030801408", "956325338430279681", "956319670029770754", "955159109170618368", "952859447638024192", "951516608840822784", "970134990901137409"],["975958493680291840", "968570040051257344", "971961789524058113", "971615350889512960", "974729064958382080", "976685698412699648", "974729021492736000", "974729136718729216", "974446015049879553", "971962155489619973", "974446627296604160", "974687439884300288", "971615249504882688", "974445840797519872", "971961979987410944", "974408269161816065"],["950503342681219072", "950032629243437059", "952939504817512448", "954609142810910720", "956558568617947136", "947973274796834816", "953184618634608640", "952351175365414912", "973649281922945024", "957337940232843264", "965256128081772544", "977211800176373760", "954363731768586240", "966700022367641600", "949424263596990464", "956213361477324800", "974529857852817421", "953183390575898624", "970561566956400643", "953619554265018373", "966416014559735808", "953183018000068608", "960600928393965568", "974236699650809856", "976126159384555520", "949445842301173760", "975635762644320257", "955141688355246083", "975451135346536453", "949245788890087424", "975806640749395969", "962722648357654528", "973649003089772544", "950341492467417088", "975075997073645568", "950023293846761472", "958562326386561025"],["966398486500421633"],["958121198268764160", "968162966284611584", "968287306091085824", "963492056579506176", "974410352220823552", "968657413724241920", "962041152034676736", "964628303704350720", "967148388822138880", "961317710490517504", "964658213445500928", "964544640014630912", "952002797402185729", "955230451689439232", "968870796750827522", "961675867507208193", "968200827960569856", "973373440752168962", "968284147692138496", "960892795736113152", "966900702571151361", "961316986301984773", "974105614161866752", "966901632456835074", "974056786209550336"],["969161651470548993", "954204061879779328", "961883857719996416", "958527300043075585", "964891880294047745", "950915219697496065", "964892074213441536", "956051590854643712", "954204000248737792", "964891798635081728", "961883781459148801", "969162022007947264", "958527193272872962", "950915246721388544", "970627539101130752", "958862808174571520", "955831310110507008"],["971481843861159936", "968039645689901056", "976712442309939200", "972421026457047040", "973094887959744512", "969488761187979264", "969132342378983425", "968335675429879808", "975810205635182592", "974208092681457664", "968025603134906368", "972745787481391104", "975635178294005760", "972427108202016768", "976794988779655168", "967995375591284736", "977158347580428288", "975634452880744448", "976715617628839936", "968193945204412416", "967850679132983296", "968383541578027008", "976373204058066944", "976847930610110471", "973551484368453633", "968368073135788032", "969830718699397120", "976850846746071040", "976848598754381824", "970914026996817921", "969926186594955264", "976910645374406656", "974051730827640832", "968728476458147847", "969549338677579776", "967847521648349185", "972010708719362048", "976911237056466944", "967972692430327809", "955507113471725568", "968026792559890434"],["974210768605466624", "953104400716914688", "953104357989519362", "971117995576758273"]]
            """
    
            # calling function to get tweets
            #tweets = api.get_tweets(query = '#Depressed', count = 20)
    
            for x in id_list:
                pronoun_count = 0
                tweets_score = api.get_tweets(x) 
                pos_score = []
                neg_score = []
            #count1 = api.get_pronoun(tweets = tweet_text)
            #count2 = api.get_d_words(tweets = tweet_text)
                for z in tweets_score: 
                    if z > 0:
                        pos_score.append(z)
                    elif z < 0:
                        neg_score.append(z)
    
    
                #final_score = sum(tweets_score)
    
                print("pos_score = ", sum(pos_score))
                print("neg_score = ", sum(neg_score))
                #print("Final Score = ", final_score)
                print("average d_word count: ", avg_d_count)
                print("average pronoun count: ", avg_pronoun_count)
                print("Final Person Tone: ", final_tone)
                print("Final Tone Score:", final_tone_score)
                print("Time List: ", t_count)
    
    
            
                sum_t_count = sum(t_count)
                if sum_t_count >= len(t_count)/2:
                    avg_t_count = 1
                else:
                    avg_t_count = 0
    
                d_count = sum(avg_d_count)/len(avg_d_count)
                print("D_score: ", d_count)
                #if d_count>3:
                 #   d_count=1
                #else:
                #    d_count=0
    
                pronoun_count = sum(avg_pronoun_count)/len(avg_pronoun_count)
                print("P_Score: ", pronoun_count)
                #if pronoun_count>6:
                #   pronoun_count=1
                #else
                #   pronoun_count=0
                tone_desc=0
    
                if final_tone[0]=="Joy":
                    tone_desc=1
                elif final_tone[0]=="Confident":
                    tone_desc=2
                elif final_tone[0]=="Analytical":
                    tone_desc=3
                elif final_tone[0]=="Tentative":
                    tone_desc=4
                elif final_tone[0]=="Anger":
                    tone_desc=5                
                elif final_tone[0]=="Fear":
                    tone_desc=6
                elif final_tone[0]=="Sadness":
                    tone_desc=7
    
    
            
                l1.append([round(sum(pos_score),2),round(sum(neg_score),2),round(d_count,2),round(pronoun_count,2),tone_desc,round(final_tone_score[0],2), avg_t_count])
                
                avg_d_count.clear()
                avg_pronoun_count.clear()
                final_tone_score.clear() 
                final_tone.clear()
                t_count.clear()
                print("before write")
                file_name="trr.csv"
    
            headers.append(["Pos_Score", "Neg_Score", "d_word_count", "Pro_Count", "Tone", "Tone_Score", "T_12<=4"])
            with open('trr.csv','w',newline='') as f:
                writer = csv.writer(f)
                writer.writerows(headers)
                writer.writerows(l1)    
                f.close()
    
            #print("Pronoun count = ", count1)
            #print("depressed word count = ", count2)
            
                
    
                print("sending file")
                deloitte=pred(file_name)
                print(deloitte)
                return(deloitte)
                #pre(file_name)
    
    
            #print("Pronoun count = ", count1)
            #print("depressed word count = ", count2)
            
            
            
        except:
            l1=[]
            l1.append("error")
            return(l1)
